// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BuyNFT extends ethereum.Event {
  get params(): BuyNFT__Params {
    return new BuyNFT__Params(this);
  }
}

export class BuyNFT__Params {
  _event: BuyNFT;

  constructor(event: BuyNFT) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Checkout extends ethereum.Event {
  get params(): Checkout__Params {
    return new Checkout__Params(this);
  }
}

export class Checkout__Params {
  _event: Checkout;

  constructor(event: Checkout) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roomId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DataSent extends ethereum.Event {
  get params(): DataSent__Params {
    return new DataSent__Params(this);
  }
}

export class DataSent__Params {
  _event: DataSent;

  constructor(event: DataSent) {
    this._event = event;
  }

  get encryptedData(): string {
    return this._event.parameters[0].value.toString();
  }

  get hashedData(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ListNFT extends ethereum.Event {
  get params(): ListNFT__Params {
    return new ListNFT__Params(this);
  }
}

export class ListNFT__Params {
  _event: ListNFT;

  constructor(event: ListNFT) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogIoTDevice extends ethereum.Event {
  get params(): LogIoTDevice__Params {
    return new LogIoTDevice__Params(this);
  }
}

export class LogIoTDevice__Params {
  _event: LogIoTDevice;

  constructor(event: LogIoTDevice) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deviceId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get status(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get renter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get roomId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rentAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get createTimestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isCancelled(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get isCheckedOut(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnlistNFT extends ethereum.Event {
  get params(): UnlistNFT__Params {
    return new UnlistNFT__Params(this);
  }
}

export class UnlistNFT__Params {
  _event: UnlistNFT;

  constructor(event: UnlistNFT) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateListingNFTPrice extends ethereum.Event {
  get params(): UpdateListingNFTPrice__Params {
    return new UpdateListingNFTPrice__Params(this);
  }
}

export class UpdateListingNFTPrice__Params {
  _event: UpdateListingNFTPrice;

  constructor(event: UpdateListingNFTPrice) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract___nftsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;
  value9: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean,
    value9: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getProvider(): Address {
    return this.value0;
  }

  getRenter(): Address {
    return this.value1;
  }

  getRoomId(): BigInt {
    return this.value2;
  }

  getRentAmount(): BigInt {
    return this.value3;
  }

  getStartTimestamp(): BigInt {
    return this.value4;
  }

  getEndTimestamp(): BigInt {
    return this.value5;
  }

  getCreateTimestamp(): BigInt {
    return this.value6;
  }

  getIsCancelled(): boolean {
    return this.value7;
  }

  getIsCheckedOut(): boolean {
    return this.value8;
  }

  getPrice(): BigInt {
    return this.value9;
  }
}

export class Contract__getNFTInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getProvider(): Address {
    return this.value0;
  }

  getRenter(): Address {
    return this.value1;
  }

  getRoomId(): BigInt {
    return this.value2;
  }

  getRentAmount(): BigInt {
    return this.value3;
  }

  getStartTimestamp(): BigInt {
    return this.value4;
  }

  getEndTimestamp(): BigInt {
    return this.value5;
  }

  getCreateTimestamp(): BigInt {
    return this.value6;
  }

  getIsCancelled(): boolean {
    return this.value7;
  }

  getIsCheckedOut(): boolean {
    return this.value8;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  _logIoTdevices(param0: BigInt): string {
    let result = super.call(
      "_logIoTdevices",
      "_logIoTdevices(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toString();
  }

  try__logIoTdevices(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "_logIoTdevices",
      "_logIoTdevices(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _nfts(param0: BigInt): Contract___nftsResult {
    let result = super.call(
      "_nfts",
      "_nfts(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract___nftsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toBigInt(),
    );
  }

  try__nfts(param0: BigInt): ethereum.CallResult<Contract___nftsResult> {
    let result = super.tryCall(
      "_nfts",
      "_nfts(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract___nftsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toBigInt(),
      ),
    );
  }

  _noRooms(): BigInt {
    let result = super.call("_noRooms", "_noRooms():(uint256)", []);

    return result[0].toBigInt();
  }

  try__noRooms(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_noRooms", "_noRooms():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _price(param0: BigInt): BigInt {
    let result = super.call("_price", "_price(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try__price(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_price", "_price(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _startTime(): BigInt {
    let result = super.call("_startTime", "_startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try__startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_startTime", "_startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bnbToUsd(amountBnb: BigInt): BigInt {
    let result = super.call("bnbToUsd", "bnbToUsd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountBnb),
    ]);

    return result[0].toBigInt();
  }

  try_bnbToUsd(amountBnb: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bnbToUsd", "bnbToUsd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountBnb),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateRentAmount(timeDiff: BigInt): BigInt {
    let result = super.call(
      "calculateRentAmount",
      "calculateRentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timeDiff)],
    );

    return result[0].toBigInt();
  }

  try_calculateRentAmount(timeDiff: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRentAmount",
      "calculateRentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timeDiff)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllRoomsValidity(): Array<boolean> {
    let result = super.call(
      "getAllRoomsValidity",
      "getAllRoomsValidity():(bool[])",
      [],
    );

    return result[0].toBooleanArray();
  }

  try_getAllRoomsValidity(): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getAllRoomsValidity",
      "getAllRoomsValidity():(bool[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBnbPrice(): BigInt {
    let result = super.call("getBnbPrice", "getBnbPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBnbPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBnbPrice", "getBnbPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLogsForToken(tokenId: BigInt): string {
    let result = super.call(
      "getLogsForToken",
      "getLogsForToken(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toString();
  }

  try_getLogsForToken(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getLogsForToken",
      "getLogsForToken(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNFTInfo(tokenId: BigInt): Contract__getNFTInfoResult {
    let result = super.call(
      "getNFTInfo",
      "getNFTInfo(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return new Contract__getNFTInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean(),
    );
  }

  try_getNFTInfo(
    tokenId: BigInt,
  ): ethereum.CallResult<Contract__getNFTInfoResult> {
    let result = super.tryCall(
      "getNFTInfo",
      "getNFTInfo(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getNFTInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean(),
      ),
    );
  }

  getNftsIdOfProvider(): Array<BigInt> {
    let result = super.call(
      "getNftsIdOfProvider",
      "getNftsIdOfProvider():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getNftsIdOfProvider(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNftsIdOfProvider",
      "getNftsIdOfProvider():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNftsIdOfRenter(): Array<BigInt> {
    let result = super.call(
      "getNftsIdOfRenter",
      "getNftsIdOfRenter():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getNftsIdOfRenter(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNftsIdOfRenter",
      "getNftsIdOfRenter():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrice(): Array<BigInt> {
    let result = super.call("getPrice", "getPrice():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getPrice(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getPrice", "getPrice():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRoomValidity(roomId: BigInt): boolean {
    let result = super.call(
      "getRoomValidity",
      "getRoomValidity(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(roomId)],
    );

    return result[0].toBoolean();
  }

  try_getRoomValidity(roomId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getRoomValidity",
      "getRoomValidity(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(roomId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTime(): BigInt {
    let result = super.call("getTime", "getTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTime", "getTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  usdToBnb(amountUsd: BigInt): BigInt {
    let result = super.call("usdToBnb", "usdToBnb(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountUsd),
    ]);

    return result[0].toBigInt();
  }

  try_usdToBnb(amountUsd: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdToBnb", "usdToBnb(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountUsd),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dataConsumerV3Address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get noRooms(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get firstTwoHourPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get hourPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get dayPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get monthPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAuthorizedGatewayCall extends ethereum.Call {
  get inputs(): AddAuthorizedGatewayCall__Inputs {
    return new AddAuthorizedGatewayCall__Inputs(this);
  }

  get outputs(): AddAuthorizedGatewayCall__Outputs {
    return new AddAuthorizedGatewayCall__Outputs(this);
  }
}

export class AddAuthorizedGatewayCall__Inputs {
  _call: AddAuthorizedGatewayCall;

  constructor(call: AddAuthorizedGatewayCall) {
    this._call = call;
  }

  get gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuthorizedGatewayCall__Outputs {
  _call: AddAuthorizedGatewayCall;

  constructor(call: AddAuthorizedGatewayCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CancelContractCall extends ethereum.Call {
  get inputs(): CancelContractCall__Inputs {
    return new CancelContractCall__Inputs(this);
  }

  get outputs(): CancelContractCall__Outputs {
    return new CancelContractCall__Outputs(this);
  }
}

export class CancelContractCall__Inputs {
  _call: CancelContractCall;

  constructor(call: CancelContractCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelContractCall__Outputs {
  _call: CancelContractCall;

  constructor(call: CancelContractCall) {
    this._call = call;
  }
}

export class CheckoutCall extends ethereum.Call {
  get inputs(): CheckoutCall__Inputs {
    return new CheckoutCall__Inputs(this);
  }

  get outputs(): CheckoutCall__Outputs {
    return new CheckoutCall__Outputs(this);
  }
}

export class CheckoutCall__Inputs {
  _call: CheckoutCall;

  constructor(call: CheckoutCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CheckoutCall__Outputs {
  _call: CheckoutCall;

  constructor(call: CheckoutCall) {
    this._call = call;
  }
}

export class EmitBuyNFTCall extends ethereum.Call {
  get inputs(): EmitBuyNFTCall__Inputs {
    return new EmitBuyNFTCall__Inputs(this);
  }

  get outputs(): EmitBuyNFTCall__Outputs {
    return new EmitBuyNFTCall__Outputs(this);
  }
}

export class EmitBuyNFTCall__Inputs {
  _call: EmitBuyNFTCall;

  constructor(call: EmitBuyNFTCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmitBuyNFTCall__Outputs {
  _call: EmitBuyNFTCall;

  constructor(call: EmitBuyNFTCall) {
    this._call = call;
  }
}

export class EmitListNFTCall extends ethereum.Call {
  get inputs(): EmitListNFTCall__Inputs {
    return new EmitListNFTCall__Inputs(this);
  }

  get outputs(): EmitListNFTCall__Outputs {
    return new EmitListNFTCall__Outputs(this);
  }
}

export class EmitListNFTCall__Inputs {
  _call: EmitListNFTCall;

  constructor(call: EmitListNFTCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmitListNFTCall__Outputs {
  _call: EmitListNFTCall;

  constructor(call: EmitListNFTCall) {
    this._call = call;
  }
}

export class EmitUnlistNFTCall extends ethereum.Call {
  get inputs(): EmitUnlistNFTCall__Inputs {
    return new EmitUnlistNFTCall__Inputs(this);
  }

  get outputs(): EmitUnlistNFTCall__Outputs {
    return new EmitUnlistNFTCall__Outputs(this);
  }
}

export class EmitUnlistNFTCall__Inputs {
  _call: EmitUnlistNFTCall;

  constructor(call: EmitUnlistNFTCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitUnlistNFTCall__Outputs {
  _call: EmitUnlistNFTCall;

  constructor(call: EmitUnlistNFTCall) {
    this._call = call;
  }
}

export class EmitUpdateListingNFTPriceCall extends ethereum.Call {
  get inputs(): EmitUpdateListingNFTPriceCall__Inputs {
    return new EmitUpdateListingNFTPriceCall__Inputs(this);
  }

  get outputs(): EmitUpdateListingNFTPriceCall__Outputs {
    return new EmitUpdateListingNFTPriceCall__Outputs(this);
  }
}

export class EmitUpdateListingNFTPriceCall__Inputs {
  _call: EmitUpdateListingNFTPriceCall;

  constructor(call: EmitUpdateListingNFTPriceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitUpdateListingNFTPriceCall__Outputs {
  _call: EmitUpdateListingNFTPriceCall;

  constructor(call: EmitUpdateListingNFTPriceCall) {
    this._call = call;
  }
}

export class RemoveAuthorizedGatewayCall extends ethereum.Call {
  get inputs(): RemoveAuthorizedGatewayCall__Inputs {
    return new RemoveAuthorizedGatewayCall__Inputs(this);
  }

  get outputs(): RemoveAuthorizedGatewayCall__Outputs {
    return new RemoveAuthorizedGatewayCall__Outputs(this);
  }
}

export class RemoveAuthorizedGatewayCall__Inputs {
  _call: RemoveAuthorizedGatewayCall;

  constructor(call: RemoveAuthorizedGatewayCall) {
    this._call = call;
  }

  get gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuthorizedGatewayCall__Outputs {
  _call: RemoveAuthorizedGatewayCall;

  constructor(call: RemoveAuthorizedGatewayCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get roomId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get startTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SendDataCall extends ethereum.Call {
  get inputs(): SendDataCall__Inputs {
    return new SendDataCall__Inputs(this);
  }

  get outputs(): SendDataCall__Outputs {
    return new SendDataCall__Outputs(this);
  }
}

export class SendDataCall__Inputs {
  _call: SendDataCall;

  constructor(call: SendDataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get encryptedData(): string {
    return this._call.inputValues[1].value.toString();
  }

  get hashedData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SendDataCall__Outputs {
  _call: SendDataCall;

  constructor(call: SendDataCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMultipleRoomsValidityCall extends ethereum.Call {
  get inputs(): SetMultipleRoomsValidityCall__Inputs {
    return new SetMultipleRoomsValidityCall__Inputs(this);
  }

  get outputs(): SetMultipleRoomsValidityCall__Outputs {
    return new SetMultipleRoomsValidityCall__Outputs(this);
  }
}

export class SetMultipleRoomsValidityCall__Inputs {
  _call: SetMultipleRoomsValidityCall;

  constructor(call: SetMultipleRoomsValidityCall) {
    this._call = call;
  }

  get roomIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get isValid(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetMultipleRoomsValidityCall__Outputs {
  _call: SetMultipleRoomsValidityCall;

  constructor(call: SetMultipleRoomsValidityCall) {
    this._call = call;
  }
}

export class SetNoRoomsCall extends ethereum.Call {
  get inputs(): SetNoRoomsCall__Inputs {
    return new SetNoRoomsCall__Inputs(this);
  }

  get outputs(): SetNoRoomsCall__Outputs {
    return new SetNoRoomsCall__Outputs(this);
  }
}

export class SetNoRoomsCall__Inputs {
  _call: SetNoRoomsCall;

  constructor(call: SetNoRoomsCall) {
    this._call = call;
  }

  get noRooms(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNoRoomsCall__Outputs {
  _call: SetNoRoomsCall;

  constructor(call: SetNoRoomsCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get price(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetRoomValidityCall extends ethereum.Call {
  get inputs(): SetRoomValidityCall__Inputs {
    return new SetRoomValidityCall__Inputs(this);
  }

  get outputs(): SetRoomValidityCall__Outputs {
    return new SetRoomValidityCall__Outputs(this);
  }
}

export class SetRoomValidityCall__Inputs {
  _call: SetRoomValidityCall;

  constructor(call: SetRoomValidityCall) {
    this._call = call;
  }

  get roomId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isValid(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRoomValidityCall__Outputs {
  _call: SetRoomValidityCall;

  constructor(call: SetRoomValidityCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
